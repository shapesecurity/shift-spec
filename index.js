var PRIMITIVE = exports.PRIMITIVE = {};
var NODE = exports.NODE = {};
var LIST_NODE = exports.LIST_NODE = {};
var MAYBE_NODE = exports.MAYBE_NODE = {};
var LIST_MAYBE_NODE = exports.LIST_MAYBE_NODE = {};

exports.default = {
  __proto__: null,
  ArrayBinding: {elements: LIST_MAYBE_NODE, restElement: MAYBE_NODE},
  ArrayExpression: {elements: LIST_MAYBE_NODE},
  ArrowExpression: {parameters: LIST_NODE, restParameter: MAYBE_NODE, body: NODE},
  AssignmentExpression: {operator: PRIMITIVE, binding: NODE, expression: NODE},
  BinaryExpression: {operator: PRIMITIVE, left: NODE, right: NODE},
  BindingIdentifier: {identifier: NODE},
  BindingPropertyIdentifier: {identifier: NODE, init: MAYBE_NODE},
  BindingPropertyProperty: {name: NODE, binding: NODE},
  BindingWithDefault: {binding: NODE, init: NODE},
  Block: {statements: LIST_NODE},
  BlockStatement: {block: NODE},
  BreakStatement: {label: MAYBE_NODE},
  CallExpression: {callee: NODE, arguments: LIST_NODE},
  CatchClause: {binding: NODE, body: NODE},
  ClassDeclaration: {name: NODE, super: MAYBE_NODE, elements: LIST_NODE},
  ClassElement: {isStatic: PRIMITIVE, method: NODE},
  ClassExpression: {name: MAYBE_NODE, super: MAYBE_NODE, elements: LIST_NODE},
  ComputedMemberExpression: {object: NODE, expression: NODE},
  ComputedPropertyName: {expression: NODE},
  ConditionalExpression: {test: NODE, consequent: NODE, alternate: NODE},
  ContinueStatement: {label: MAYBE_NODE},
  DataProperty: {name: NODE, expression: NODE},
  DebuggerStatement: {},
  Directive: {rawValue: PRIMITIVE},
  DoWhileStatement: {body: NODE, test: NODE},
  EmptyStatement: {},
  Export: {declaration: NODE},
  ExportAllFrom: {moduleSpecifier: PRIMITIVE},
  ExportDefault: {body: NODE},
  ExportFrom: {namedExports: LIST_NODE, moduleSpecifier: PRIMITIVE},
  ExportSpecifier: {name: MAYBE_NODE, exportedName: NODE},
  ExpressionStatement: {expression: NODE},
  ForInStatement: {left: NODE, right: NODE, body: NODE},
  ForOfStatement: {left: NODE, right: NODE, body: NODE},
  ForStatement: {init: MAYBE_NODE, test: MAYBE_NODE, update: MAYBE_NODE, body: NODE},
  FunctionBody: {directives: LIST_NODE, statements: LIST_NODE},
  FunctionDeclaration: {isGenerator: PRIMITIVE, name: NODE, parameters: LIST_NODE, restParameter: MAYBE_NODE, body: NODE},
  FunctionExpression: {isGenerator: PRIMITIVE, name: MAYBE_NODE, parameters: LIST_NODE, restParameter: MAYBE_NODE, body: NODE},
  Getter: {name: NODE, body: NODE},
  Identifier: {name: PRIMITIVE},
  IdentifierExpression: {identifier: NODE},
  IfStatement: {test: NODE, consequent: NODE, alternate: MAYBE_NODE},
  Import: {defaultBinding: MAYBE_NODE, namedImports: LIST_NODE, moduleSpecifier: PRIMITIVE},
  ImportNamespace: {defaultBinding: MAYBE_NODE, namespaceBinding: NODE, moduleSpecifier: PRIMITIVE},
  ImportSpecifier: {name: MAYBE_NODE, binding: NODE},
  LabeledStatement: {label: NODE, body: NODE},
  LiteralBooleanExpression: {value: PRIMITIVE},
  LiteralInfinityExpression: {},
  LiteralNullExpression: {},
  LiteralNumericExpression: {value: PRIMITIVE},
  LiteralRegExpExpression: {pattern: PRIMITIVE, flags: PRIMITIVE},
  LiteralStringExpression: {value: PRIMITIVE},
  Method: {isGenerator: PRIMITIVE, name: NODE, parameters: LIST_NODE, restParameter: MAYBE_NODE, body: NODE},
  Module: {items: LIST_NODE},
  NewExpression: {callee: NODE, arguments: LIST_NODE},
  NewTargetExpression: {},
  ObjectBinding: {properties: LIST_NODE},
  ObjectExpression: {properties: LIST_NODE},
  PostfixExpression: {operand: NODE, operator: PRIMITIVE},
  PrefixExpression: {operator: PRIMITIVE, operand: NODE},
  ReturnStatement: {expression: MAYBE_NODE},
  Script: {body: NODE},
  Setter: {name: NODE, parameter: NODE, body: NODE},
  ShorthandProperty: {name: NODE},
  SpreadElement: {expression: NODE},
  StaticMemberExpression: {object: NODE, property: PRIMITIVE},
  StaticPropertyName: {value: PRIMITIVE},
  Super: {},
  SwitchCase: {test: NODE, consequent: LIST_NODE},
  SwitchDefault: {consequent: LIST_NODE},
  SwitchStatement: {discriminant: NODE, cases: LIST_NODE},
  SwitchStatementWithDefault: {discriminant: NODE, preDefaultCases: LIST_NODE, defaultCase: NODE, postDefaultCases: LIST_NODE},
  TemplateElement: {rawValue: PRIMITIVE},
  TemplateExpression: {tag: MAYBE_NODE, elements: LIST_NODE},
  ThisExpression: {},
  ThrowStatement: {expression: NODE},
  TryCatchStatement: {body: NODE, catchClause: NODE},
  TryFinallyStatement: {body: NODE, catchClause: MAYBE_NODE, finalizer: NODE},
  VariableDeclaration: {kind: PRIMITIVE, declarators: LIST_NODE},
  VariableDeclarationStatement: {declaration: NODE},
  VariableDeclarator: {binding: NODE, init: MAYBE_NODE},
  WhileStatement: {test: NODE, body: NODE},
  WithStatement: {object: NODE, body: NODE},
  YieldExpression: {expression: MAYBE_NODE},
  YieldGeneratorExpression: {expression: NODE},
};
